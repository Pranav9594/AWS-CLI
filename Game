

# Step 1: Configure AWS CLI with your credentials
aws configure
# Enter your AWS Access Key, Secret Key, Region, and output format

# Step 2: Create an IAM Role for Lambda Execution
aws iam create-role \
    --role-name lambda-execute-role \
    --assume-role-policy-document file://trust-policy.json

# Contents of trust-policy.json:
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Service": "lambda.amazonaws.com"
#       },
#       "Action": "sts:AssumeRole"
#     }
#   ]
# }

# Step 3: Attach AWSLambdaBasicExecutionRole Policy to the Role
aws iam attach-role-policy \
    --role-name lambda-execute-role \
    --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

# Step 4: Write a simple Python game and zip it
# game.py:
# def lambda_handler(event, context):
#     return {
#         'statusCode': 200,
#         'body': 'Welcome to the guessing game! Guess a number between 1 and 5.'
#     }
zip game.zip game.py

# Step 5: Create the Lambda Function
aws lambda create-function \
    --function-name TextGameFunction \
    --runtime python3.9 \
    --role arn:aws:iam::<YOUR_ACCOUNT_ID>:role/lambda-execute-role \
    --handler game.lambda_handler \
    --zip-file fileb://game.zip

# Step 6: Invoke the Lambda Function
aws lambda invoke \
    --function-name TextGameFunction \
    response.json

# Step 7: Check the output
cat response.json

# This is a basic example. For a real game, you can expand the logic in `game.py` and integrate with API Gateway for HTTP access.
